# docker-compose.yml - Complete Production Setup

version: '3.8'

services:
  # FastAPI Backend Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-cost-copilot-api
    ports:
      - "8000:8000"
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GEMINI_MODEL=${GEMINI_MODEL:-gemini-1.5-flash}
      - DB_PATH=/app/data/app.db
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - ai-cost-network
    depends_on:
      - data-init

  # Streamlit Frontend Service  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai-cost-copilot-frontend
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://api:8000
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - ai-cost-network

  # Data initialization service (runs once)
  data-init:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-cost-copilot-data-init
    command: python scripts/generate_sample_data.py
    volumes:
      - ./data:/app/data
    environment:
      - DB_PATH=/app/data/app.db
    restart: "no"
    networks:
      - ai-cost-network

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: ai-cost-copilot-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - frontend
    restart: unless-stopped
    networks:
      - ai-cost-network
    profiles:
      - production

networks:
  ai-cost-network:
    driver: bridge
    name: ai-cost-copilot-network

volumes:
  data:
    name: ai-cost-copilot-data
    driver: local
  logs:
    name: ai-cost-copilot-logs
    driver: local
